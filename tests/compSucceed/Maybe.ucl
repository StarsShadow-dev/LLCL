// compSucceed

Maybe = fn(T: Type): Type {
	enum {
		None
		Some = struct(value: T) {}
	}
}

maybeStringToString = fn(maybeString: Maybe(String)): String {
	match maybeString {
		None -> {
			"None"
		}
		Some(some) -> {
			some.value
		}
	}
}

test1 = fn(): Maybe(String) {
	Maybe(String).None
}

test2 = fn(): Maybe(String) {
	Maybe(String).Some {
		value = "a string"
	}
}

@compAssert(maybeStringToString(test1()) == "None")
@compAssert(maybeStringToString(test2()) == "a string")