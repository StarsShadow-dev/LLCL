// ~/.Parallel_Lang/Parallel-lang build_objectFile Parallel-lang/parallel

function printHelp(): Void {
	printf("Usage: parallel-lang <command> [<command_arguments>] [<options>]\n");
	printf("\n");
	printf("Commands:\n");
	printf("\n");
	printf("parallel-lang build_objectFile <target_triple> <config_path> [<options>]\n");
	printf("    creates an object file\n");
	printf("\n");
	printf("parallel-lang build_binary <target_triple> <config_path> [<options>]\n");
	printf("    build_objectFile and links the object file using clang (clang also links the C standard library)\n");
	printf("\n");
	// printf("parallel-lang run <target_triple> <config_path> [<options>]\n");
	// printf("    build_binary and runs the binary\n");
	// printf("\n");
	printf("All of the above commands support the following options:\n");
	printf("\n");
	printf("-d\n");
	printf("    includes debug information (very useful with LLDB)\n");
	printf("-v\n");
	printf("    verbose output\n");
	printf("\n");

	return;
}

function printf(pointer: Pointer): Int32 "declare i32 @printf(ptr noundef, ...)"