const js = @import("./js.ucl");

// const Vec2 = struct {
// 	field x: Number;
// 	field y: Number;
	
// 	const new = fn(x: Number, y: Number): Vec2 {
// 		ret Vec2 {
// 			.x = x;
// 			.y = y;
// 		};
// 	};
	
// 	const add = fn(v1: Vec2, v2: Vec2): Vec2 {
// 		ret Vec2.new(v1.x + v2.x, v1.y + v2.y);
// 	};
// };

const a = struct {
	const test = fn() {
		js.log(4);
		b.test();
	};
};

const b = struct {
	const test = fn() {
		a.test(5);
	};
};

const main = fn(): Number {
	// main();
	// a.test();
	// b.test();
	var dictionary = js.Dictionary(Number).new();
	dictionary.set("a", 1);
	dictionary.set("b", 2);
	ret dictionary.ge("a");
};
@export("main", main);

//////////////////////////////

// const function = fn(aIn: String): 'Any {
// 	const String2 = struct {
// 		property a: String;
// 		property b: String;
		
// 		const new = fn(bIn: String): String2 {
// 			@compileDebug();
// 			ret struct: String2 {
// 				a = aIn;
// 				b = bIn;
// 			};
// 		};
// 	};
// 	ret String2;
// };

// var string2: 'function("a") = function("a").new(@opaque("b"));

// @addTopCodeGen(string2.a);
// @addTopCodeGen("\n");
// @addTopCodeGen(string2.b);

//////////////////////////////

// const Vec2 = struct {
// 	field x: Number;
// 	field y: Number;
	
// 	const new = fn(x: Number, y: Number): Vec2 {
// 		ret Vec2 {
// 			.x = x;
// 			.y = y;
// 		};
// 	};
// };

// comptime var a: Vec2 = Vec2.new(1, @opaque(2));
// @compileDebug(a);

// const Vec2 = struct {
// 	field x: Number;
// 	field y: Number;
	
// 	const new = fn(x: Number, y: Number): Vec2 {
// 		ret Vec2 {
// 			.x = x;
// 			.y = y;
// 		};
// 	};
	
// 	const add = fn(v1: Vec2, v2: Vec2): Vec2 {
// 		ret Vec2.new(v1.x + v2.x, v1.y + v2.y);
// 	};
// };

// comptime {
// 	var a = Vec2.new(1, 2);
// 	var b = Vec2.new(3, 4);

// 	var c = Vec2.add(a, b);
// 	@assert(c.x == 4);
// 	@assert(c.y == 6);

// 	var d = a.add(b);
// 	@assert(d.x == 4);
// 	@assert(d.y == 6);
// }