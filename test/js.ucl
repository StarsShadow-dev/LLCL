const indent = inline fn() {
	@addCodeGen("\t");
};

@onCodeGen("start", fn() {
	@addTopCodeGen("\"use strict\";\n");
	@addTopCodeGen("const symbols = {};\n");
});

@onCodeGen("string", fn(text: String) {
	@addCodeGen("\"", text, "\"");
});

@onCodeGen("identifier", fn(name: String) {
	@addCodeGen(name);
});

@onCodeGen("fn_arg", fn(name: String, type: Type, more: Bool) {
	@addCodeGen(name);
	if (more) {
		@addCodeGen(",");
	}
});

@onCodeGen("fn", fn(name: String, argumentText: String, codeBlockText: String) {
	@addCodeGen("symbols[\"");
	@addCodeGen(name);
	@addCodeGen("\"] = (");
	@addCodeGen(argumentText);
	@addCodeGen(") => {\n");
	@addCodeGen(codeBlockText);
	@addCodeGen("}\n");
});

@onCodeGen("call_arg", fn(thing: String, more: Bool) {
	@addCodeGen(thing);
	if (more) {
		@addCodeGen(",");
	}
});

@onCodeGen("call", fn(name: String, argumentText: String) {
	indent();
	@addCodeGen("symbols[\"");
	@addCodeGen(name);
	@addCodeGen("\"](");
	@addCodeGen(argumentText);
	@addCodeGen(");\n");
});

const log = fn(string: String) {
	indent();
	@addCodeGen("console.log(");
	string;
	@addCodeGen(");\n");
};