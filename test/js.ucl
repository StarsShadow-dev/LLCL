var test = "1";

@onCodeGen("startExpression", fn(indentation: Number) {
	var i = 0;
	while (i < indentation) {
		@addCodeGen("\t");
		i = i + 1;
	}
});

@onCodeGen("endExpression", fn() {
	@addCodeGen(";\n");
});

@onCodeGen("start", fn() {
	@addTopCodeGen("\"use strict\";\n");
	@addTopCodeGen("const symbols = {};\n");
});

@onCodeGen("bool", fn(value: 'Bool) {
	if (value) {
		@addCodeGen("true");
	} else {
		@addCodeGen("false");
	}
});

@onCodeGen("number", fn(number: 'Number, valueText: 'String) {
	@addCodeGen(valueText);
});

@onCodeGen("string", fn(text: 'String) {
	@addCodeGen("\"", text, "\"");
});

@onCodeGen("operator", fn(operatorText: 'String, leftText: 'String, rightText: 'String) {
	@addCodeGen("(", leftText, " ", operatorText, " ", rightText, ")");
});

@onCodeGen("alias", fn(name: 'String, valueText: 'String, mutable: 'Bool) {
	if (mutable) {
		@addCodeGen("var ");
	} else {
		@addCodeGen("const ");
	}
	@addCodeGen(name, " = ", valueText);
});

@onCodeGen("set_alias", fn(name: 'String, aliasText: 'String, valueText: 'String) {
	@addCodeGen(aliasText, " = ", valueText);
});

@onCodeGen("identifier", fn(name: 'String) {
	@addCodeGen(name);
});

@onCodeGen("if", fn(conditionText: 'String, trueText: 'String, falseText: 'String) {
	@addCodeGenTest();
	@addCodeGen("if (", conditionText, ") {\n");
	@addCodeGen(trueText);
	@addCodeGenTest();
	@addCodeGen("} else {\n");
	@addCodeGen(falseText);
	@addCodeGenTest();
	@addCodeGen("}\n");
});

@onCodeGen("fn_arg", fn(name: 'String, type: 'Any, more: 'Bool) {
	@addCodeGen(name);
	if (more) {
		@addCodeGen(", ");
	}
});

@onCodeGen("fn", fn(name: 'String, argumentText: 'String, codeBlockText: 'String) {
	@addCodeGen("symbols[\"");
	@addCodeGen(name);
	@addCodeGen("\"]");
	@addCodeGen(" = (");
	@addCodeGen(argumentText);
	@addCodeGen(") => {\n");
	@addCodeGen(codeBlockText);
	@addCodeGen("}\n");
});

@onCodeGen("return", fn(valueText: 'String) {
	@addCodeGen("return ", valueText);
});

@onCodeGen("call_arg", fn(text: 'String, more: 'Bool) {
	@addCodeGen(text);
	if (more) {
		@addCodeGen(", ");
	}
});

@onCodeGen("call", fn(name: 'String, external: 'Bool, argumentText: 'String) {
	if (external) {
		@addCodeGen(name);
	} else {
		@addCodeGen("symbols[\"", name, "\"]");
	}
	@addCodeGen("(", argumentText, ")");
});

const log = @extern("console.log", fn(text: String) {});