var indentation = 1;

const indent = inline fn() {
	var i: 'Number = 0;
	while (i < indentation) {
		@addCodeGen("\t");
		i = i + 1;
	}
};

@onCodeGen("start", fn() {
	@addTopCodeGen("\"use strict\";\n");
	@addTopCodeGen("const symbols = {};\n");
});

@onCodeGen("string", fn(text: 'String) {
	@addCodeGen("\"", text, "\"");
});

@onCodeGen("alias", fn(name: 'String, valueText: 'String, mutable: 'Bool) {
	indent();
	if (mutable) {
		@addCodeGen("var ");
	} else {
		@addCodeGen("const ");
	}
	@addCodeGen(name);
	@addCodeGen(" = ");
	@addCodeGen(valueText);
	@addCodeGen(";\n");
});

@onCodeGen("set_alias", fn(name: 'String, aliasText: 'String, valueText: 'String) {
	indent();
	@addCodeGen(aliasText);
	@addCodeGen(" = ");
	@addCodeGen(valueText);
	@addCodeGen(";\n");
});

@onCodeGen("identifier", fn(name: 'String) {
	@addCodeGen(name);
});

@onCodeGen("if", fn(conditionText: 'String, trueText: 'String, falseText: 'String) {
	indent();
	@addCodeGen("if (");
	@addCodeGen(conditionText);
	@addCodeGen(") {\n");
	@addCodeGen(trueText);
	indent();
	@addCodeGen("} else {\n");
	@addCodeGen(falseText);
	indent();
	@addCodeGen("}\n");
});

@onCodeGen("fn_arg", fn(name: 'String, type: 'Type, more: 'Bool) {
	@addCodeGen(name);
	if (more) {
		@addCodeGen(", ");
	}
});

@onCodeGen("fn", fn(name: 'String, argumentText: 'String, codeBlockText: 'String) {
	@addCodeGen("symbols[\"");
	@addCodeGen(name);
	@addCodeGen("\"] = (");
	@addCodeGen(argumentText);
	@addCodeGen(") => {\n");
	@addCodeGen(codeBlockText);
	@addCodeGen("}\n");
});

@onCodeGen("call_arg", fn(text: 'String, more: 'Bool) {
	@addCodeGen(text);
	if (more) {
		@addCodeGen(", ");
	}
});

@onCodeGen("call", fn(name: 'String, argumentText: 'String) {
	indent();
	@addCodeGen("symbols[\"");
	@addCodeGen(name);
	@addCodeGen("\"](");
	@addCodeGen(argumentText);
	@addCodeGen(");\n");
});

const log = fn(string: String) {
	indent();
	@addCodeGen("console.log(");
	string;
	@addCodeGen(");\n");
};