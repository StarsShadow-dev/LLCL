var test = "1";

@onCodeGen("startExpression", fn(indentation: Number) {
	var i = 0;
	while (i < indentation) {
		@addCodeGen("\t");
		i = i + 1;
	}
});

@onCodeGen("endExpression", fn() {
	@addCodeGen(";\n");
});

@onCodeGen("start", fn() {
	@addTopCodeGen("\"use strict\";\n");
	@addTopCodeGen("const symbols = {};\n");
});

@onCodeGen("bool", fn(value: Bool) {
	if (value) {
		@addCodeGen("true");
	} else {
		@addCodeGen("false");
	}
});

@onCodeGen("number", fn(number: Number, base10Text: String) {
	@addCodeGen(base10Text);
});

@onCodeGen("string", fn(text: String) {
	@addCodeGen("\"", text, "\"");
});

@onCodeGen("operator", fn(operatorText: String, leftText: String, rightText: String) {
	@addCodeGen("(", leftText, " ", operatorText, " ", rightText, ")");
});

@onCodeGen("alias", fn(name: String, valueText: String, mutable: Bool) {
	@addCodeGen_startExpression();
	if (mutable) {
		@addCodeGen("var ");
	} else {
		@addCodeGen("const ");
	}
	@addCodeGen(name, " = ", valueText);
	@addCodeGen_endExpression();
});

@onCodeGen("set_alias", fn(name: String, aliasText: String, valueText: String) {
	@addCodeGen_startExpression();
	@addCodeGen(aliasText, " = ", valueText);
	@addCodeGen_endExpression();
});

@onCodeGen("identifier", fn(name: String) {
	@addCodeGen(name);
});

@onCodeGen("memberAccess", fn(leftText: String, name: String) {
	@addCodeGen(leftText, ".", name);
});

@onCodeGen("struct", fn(codeBlockText: String) {
	@addCodeGen("(() => {\n");
	@addCodeGen_startExpression();
	@addCodeGen("\tvar __uclstruct__ = {}");
	@addCodeGen_endExpression();
	@addCodeGen(codeBlockText);
	@addCodeGen_startExpression();
	@addCodeGen("\treturn __uclstruct__");
	@addCodeGen_endExpression();
	@addCodeGen_startExpression();
	@addCodeGen("})()");
});

@onCodeGen("if", fn(conditionText: String, trueText: String, falseText: String) {
	@addCodeGen_startExpression();
	@addCodeGen("if (", conditionText, ") {\n");
	@addCodeGen(trueText);
	@addCodeGen_startExpression();
	if (falseText != "") {
		@addCodeGen("} else {\n");
		@addCodeGen(falseText);
		@addCodeGen_startExpression();
	}
	@addCodeGen("}\n");
});

@onCodeGen("fn_arg", fn(name: String, type: Any, more: Bool) {
	@addCodeGen(name);
	if (more) {
		@addCodeGen(", ");
	}
});

@onCodeGen("fn", fn(name: String, argumentText: String, codeBlockText: String) {
	@addCodeGen("symbols[\"");
	@addCodeGen(name);
	@addCodeGen("\"]");
	@addCodeGen(" = (");
	@addCodeGen(argumentText);
	@addCodeGen(") => {\n");
	@addCodeGen(codeBlockText);
	@addCodeGen("}\n");
});

@onCodeGen("return", fn(valueText: String) {
	@addCodeGen("return ", valueText);
});

@onCodeGen("call_arg", fn(text: String, more: Bool) {
	@addCodeGen(text);
	if (more) {
		@addCodeGen(", ");
	}
});

@onCodeGen("call", fn(name: String, external: Bool, argumentText: String) {
	if (external) {
		@addCodeGen(name, "(", argumentText, ")");
	} else {
		@addCodeGen("symbols[\"", name, "\"]", "(", argumentText, ")");
	}
});

const log = @extern("console.log", fn(text: String) {});