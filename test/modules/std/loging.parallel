import "../libc_bindings"

struct Thing {
	var number: Int32;
}

impl Thing {
	function test(): Void {
		return;
	}
}

macro print {
	#warning("this macro is not very useful right now", "");
	printLine("print test");
}

function printLine(string: Pointer): Void {
	libc_bindings::printf(string);
	libc_bindings::putchar(10); // \n
	
	return;
}

// there may be a more elegant way of doing this, but it seems to work
function print_Int32(number: Int32): Void {	
	var absoluteNumber: Int32;
	if (number < 0) {
		libc_bindings::putchar(45);
		absoluteNumber = 0 - number;
	} else {
		absoluteNumber = number;
	}
	
	var digit: Int32 = absoluteNumber % 10;
	var n: Int32 = absoluteNumber / 10;
	if (n != 0) {
		print_Int32(n);
	}
	
	libc_bindings::putchar(48 + digit);
	return;
}